/*

Module copied from https://github.com/nytlabs/gilbot-slack/blob/master/phrase.js -- 
NOTE THAT IT IS NOT A PROPER GIT SUBMODULE AND WILL HAVE TO BE MANUALLY UPDATED

This module chooses phrases from a key value store, allowing you to separate UI speech from the code.

The value of the key can be an array or string:

e.g
{
  "greeting" : ["Hello", "Hi", "Hey"],
  "opener" : "We've got some great stuff this week! Let's find you something just for you",
  "attr_comparison" : "Let me try this: are you feeling more like %s or %s?"
}

Text can be inserted in a string using sprintf style formatting (%s), with the options passed as an array.

Function can be given a user id in order to track per user phrases being said and if possible not to use the same response twice in a row

Usage:

var phrases =  JSON.parse(fs.readFileSync('data/phrases.json', 'utf8'));
var spk = require('pickPhrase')(phrases);

spk.say("greeting");

spk.say("greeting", "U0QBRLZFH") // with userID

spk.say("attr_comparison", ["action", "sci-fi"]); // with inserts

spk.say("attr_comparison", "U0QBRLZFH", ["action", "sci-fi"]); // with inserts and user Id


Mark McKeague NYT R&D 2016
*/


var vsprintf = require("sprintf").vsprintf;

function pickPhrase(phrases) {

    if (!phrases) {
        throw new Error('No phrases given');
    }

    var phraseHistory = {};
    var phrase = {};


    phrase.say = function(key) {
      var options = phrases[key];
      if(options == undefined){
        return key;
      } else {
        var inserts = [];
        userId = "unknown";

        if(arguments.length == 2) {
          if(Array.isArray(arguments[1])) {
            inserts = Array.prototype.slice.call(arguments[1]);
          } else {
            userId = arguments[1];
          }
        } else if(arguments.length == 3 ){
          if(Array.isArray(arguments[2])) {
            inserts = Array.prototype.slice.call(arguments[2]);
          }
          userId = arguments[1];
        }

        if(Array.isArray(options)) {
          var num;
          if(options.length > 1) {
            if(phraseHistory[userId] == undefined) phraseHistory[userId] = {};
            num = phraseHistory[userId][key];
            while(num == phraseHistory[userId][key]) { // Pick a random phrase different to last time
              num = Math.floor(Math.random() * options.length);
            }
            phraseHistory[userId][key] = num;
          } else {
            num = 0;
          }
          return vsprintf(options[num], inserts);
        } else {
          return vsprintf(options, inserts);
        }
      }
    }

    return phrase;
};

module.exports = pickPhrase;